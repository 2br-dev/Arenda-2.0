{"version":3,"sources":["components/Navigation.js","components/Reestr.js","components/Bills.js","components/Print.js","components/Payments.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","_this","this","react_default","a","createElement","Link","to","onClick","props","handleChangeUrl","Component","Reestr","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","renters","contracts","rooms","roomsInContracts","_this2","fetch","then","res","json","setState","catch","console","log","_this$state","map","renter","i","key","concat","short_name","balance","style","color","full_name","inn","kpp","ogrn","uridich_address","post_adress","phone","email","bank_name","bank_bik","bank_ks","bank_rs","Bills","Print","Payments","MainPage","url","switchComponent","Reestr_Reestr","Bills_Bills","Print_Print","Payments_Payments","bind","assertThisInitialized","Fragment","Navigation_Navigation","App","BrowserRouter","Switch","Route","path","component","MainPage_MainPage","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","App_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.97127e14.chunk.js","sourcesContent":["import { Link } from 'react-router-dom'\r\nimport React, { Component } from 'react'\r\n\r\n// компонент навигации\r\n// навигация и больше ничего, лаконично и красиво.\r\n\r\nexport default class Navigation extends Component {\r\n  render() {\r\n    return (\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <Link to='/reestr' onClick={() => this.props.handleChangeUrl('reestr')}>Реестр</Link>\r\n          </li>\r\n          <li>\r\n            <Link to='/bills' onClick={() => this.props.handleChangeUrl('bills')}>Выставление счетов</Link>\r\n          </li>\r\n          <li>\r\n            <Link to='/print' onClick={() => this.props.handleChangeUrl('print')}>Печать счетов</Link>\r\n          </li>\r\n          <li>\r\n            <Link to='/payments'onClick={() => this.props.handleChangeUrl('payments')}>Оплаты</Link>\r\n          </li> \r\n        </ul>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Reestr extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      renters: [],\r\n      contracts: [],\r\n      rooms: [],\r\n      roomsInContracts: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // получаем арендаторов\r\n    fetch(`http://arenda.local/api/renters/read.php`)\r\n      .then(res => res.json())\r\n      .then(json => this.setState({ renters: json.renters }))\r\n      .catch(() => console.log('some error occured'))\r\n\r\n/*     // получаем договора\r\n    fetch(`http://arenda.local/api/contract/read.php`)\r\n      .then(res => res.json())\r\n      .then(json => this.setState({ contracts: json.contracts }))\r\n      .catch(() => console.log('some error occured'))\r\n\r\n    // получаем комнаты\r\n    fetch(`http://arenda.local/api/room/read.php`)\r\n      .then(res => res.json())\r\n      .then(json => this.setState({ rooms: json.rooms }))\r\n      .then(this.createRoomsArray)\r\n      .catch(() => console.log('some error occured'))  */\r\n  }\r\n/* \r\n  //комнат в массив\r\n  createRoomsArray = () => {\r\n    const roomsInContracts = this.state.contracts;\r\n    \r\n    for (let i = 0; i < roomsInContracts.length; i++) {\r\n      roomsInContracts[i] = roomsInContracts[i].rooms.split(',');\r\n    }\r\n\r\n    this.setState({ roomsInContracts });\r\n  } */\r\n\r\n  render() {\r\n    const { contracts, renters, roomsInContracts, rooms } = this.state\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          <button>Показать все договора</button>\r\n        </div>\r\n\r\n        {renters.map((renter, i) => {                  \r\n          return (\r\n          <div key={`renter-${i}`}>   \r\n            <h2>{renter.short_name} — Баланс: \r\n              {renter.balance < 0 ? <span style={{'color':'green'}}> {renter.balance} ₽ </span> : <span style={{'color':'red'}}> {renter.balance} ₽</span>}\r\n            </h2>\r\n            <div>\r\n              <p><b>{renter.full_name}</b></p>\r\n              <p><b>ИНН:</b> {renter.inn} / <b>КПП:</b> {renter.kpp}</p>\r\n              <p><b>ОГРН/ОГРНИП:</b> {renter.ogrn}</p>\r\n              <p><b>Юридический адрес:</b> {renter.uridich_address}</p>\r\n              <p><b>Почтовый адрес:</b> {renter.post_adress}</p>\r\n              <p><b>Телефон:</b> {renter.phone}</p>\r\n              <p><b>E-mail:</b> {renter.email}</p>\r\n              <p><b>Наименование банка:</b> {renter.bank_name}</p>\r\n              <p><b>БИК:</b> {renter.bank_bik}</p>\r\n              <p><b>Кор. счет:</b> {renter.bank_ks}</p>\r\n              <p><b>Расчетный счет:</b> {renter.bank_rs}</p>\r\n            </div>\r\n\r\n            {/*contracts.map((contract, i) => {\r\n              if (contract.renter === renter.id) {\r\n\r\n                return (\r\n                  <div key={`contract-${i}`}>\r\n                    <div>\r\n                      \r\n                      {contract.end_date !== '' \r\n                        ? <p>{contract.contract_number} от {contract.datetime}</p> \r\n                        : <p>{contract.contract_number} от {contract.datetime} <i>(безсрочно)</i></p>\r\n                      }\r\n\r\n                      {contract.status === '0' \r\n                        ? <span>Завершенный</span> \r\n                        : contract.status === '0.5'\r\n                        ? <span>Действителен до: {contract.end_date}</span>\r\n                        : <span>Действующий</span>\r\n                      }\r\n                    </div>\r\n                    <div>\r\n                      {roomsInContracts.map((room, i) => {\r\n                        for(let j = 0; j < room.length; j++) {\r\n                          if (room[j] == rooms.id) {\r\n                            return (\r\n                              <div key={`room-${i}`}>\r\n                                <p><b>Помещение:</b> {rooms[room[j]].room_number}</p>\r\n                                <p><b>Номер на схеме:</b> {rooms[room[j]].number_scheme}</p>\r\n                                <p><b>Площадь:</b> {rooms[room[j]].square}</p>\r\n                              </div>\r\n                        )}}\r\n                      })}  \r\n                      <p><b>Сумма договора:</b> {contract.summa}</p>\r\n                      <p><b>Срок Аренды:</b> с {contract.start_date} по {contract.end_date}</p>\r\n                      <p><b>Размер пени:</b> {contract.peni}</p>\r\n                      <p><b>Аренда начисляется с:</b> {contract.start_date}</p>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              }               \r\n            })*/}\r\n          </div>\r\n          ) \r\n        })} \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Bills extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        bills\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Print extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        print\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Payments extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        payments\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Navigation from './Navigation'\r\nimport Reestr from './Reestr'\r\nimport Bills from './Bills'\r\nimport Print from './Print'\r\nimport Payments from './Payments'\r\n\r\nexport default class MainPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      url: ''\r\n    }\r\n    this.handleChangeUrl = this.handleChangeUrl.bind(this);\r\n  }\r\n  \r\n  handleChangeUrl = url => this.setState({ url });\r\n\r\n  // переключаем компонент и отправляем в рендер\r\n  switchComponent = () => {\r\n    switch(this.state.url) {\r\n      case '':\r\n        return <Reestr />  \r\n      case 'reestr':\r\n        return <Reestr /> \r\n      case 'bills':\r\n        return <Bills /> \r\n      case 'print':\r\n        return <Print /> \r\n      case 'payments':\r\n        return <Payments /> \r\n      default: \r\n        console.log('default');  \r\n    }     \r\n  }\r\n\r\n  render() {\r\n    const { url } = this.state\r\n\r\n    return (\r\n      <>\r\n        <Navigation \r\n          url={url} \r\n          handleChangeUrl={this.handleChangeUrl}\r\n        />\r\n\r\n        {this.switchComponent()}   \r\n      </>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport MainPage from './components/MainPage'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path={'/reestr'} component={MainPage}/>\n          <Route path={'/bills'} component={MainPage}/>\n          <Route path={'/print'} component={MainPage}/>\n          <Route path={'/payments'} component={MainPage}/>\n\n          <MainPage />\n\n        </Switch>\n      </BrowserRouter> \n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}